package com.inetum.appliSpring.jpa.dao;

import java.util.List;

import javax.persistence.EntityManager;

import com.inetum.appliSpring.jpa.entity.Employe;

public class DaoEmployeJpaSansSpring implements DaoEmploye {
	
	
	
	private EntityManager entityManager;
	
	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
		
	}


	@Override
	public Employe findById(Long numero) {
		 return entityManager.find(Employe.class, numero);
		 // SELECT FROM Employe WHERE numero = ?
	}

	@Override
	public List<Employe> findAll() {
		return entityManager.createQuery("SELECT e FROM Employe e",Employe.class)
				.getResultList();
	}

	@Override
	public List<Employe> findByPrenom(String prenom) {
		return entityManager.createQuery("SELECT e FROM Employe e WHERE e.prenom =:prenomChercher",
						Employe.class)
				.setParameter("prenomChercher", prenom)
				.getResultList();
	}
	
	@Override
	public Employe insert(Employe emp) {
		try {
			entityManager.getTransaction().begin();
			//en entrée , emp est un nouvel objet employé avec .numero à null (encore inconnu)
			//déclenche automatiquement INSERT INTO Employe( prenom,nom, ....) 
			//VALUES(emp.getprenom() , ....)
			entityManager.persist(emp);//.numero n'est normalement plus null si auto-incr
			entityManager.getTransaction().commit();
			} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			throw new RuntimeException("echec insert(employe)");
			}
			return emp; //on retourne l'objet modifié (avec .empId non null)
	}

	@Override
	public void update(Employe emp) {
		try {
			entityManager.getTransaction().begin();
	
			//déclenche automatiquement UPDATE Employe SET prenom=? ,nom=?,WHERE numero=?) 
			entityManager.merge(emp);
			entityManager.getTransaction().commit();
			} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			throw new RuntimeException("echec update(employe)");
			}
	}

	@Override
	public void deletById(long num) {
	
		try {
			entityManager.getTransaction().begin();
			
			Employe empAsupprimer = entityManager.find(Employe.class, num);
			entityManager.remove(empAsupprimer);
			//déclenche automatiquement DELETE FROM  Employe WHERE numero=empAsupprimer.getNumero()
			
			entityManager.getTransaction().commit();
			} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			throw new RuntimeException("echec deletById");
			}
	}



}
